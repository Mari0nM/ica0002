- name: Create build directory
  ansible.builtin.file:
    path: /opt/agama
    state: directory
    owner: root
    mode: '0700'

- name: Fetch application source
  ansible.builtin.get_url:
    url: 'https://raw.githubusercontent.com/hudolejev/agama/6b167d27bf2cc8786d4c54fd6cb0d9fabfb3918b/{{ item }}'
    dest: '/opt/agama/{{ item }}'
    owner: root
    mode: '0700'
  loop:
    - agama.py
    - Dockerfile

- name: Build Agama container
  community.docker.docker_image:
    name: agama
    source: build
    build:
      path: /opt/agama

- name: Start Agama container
  community.docker.docker_container:
    name: "agama-{{ item + 1 }}"
    image: agama
    published_ports: '{{ agama_port_range_start + item }}:8000'
    env:
      AGAMA_DATABASE_URI: mysql+pymysql://{{ mysql_user }}:{{ mysql_password }}@mysql-1/{{ mysql_database }}
  no_log: true
  loop: "{{ range(0, agama_containers_per_vm | int) | list }}"

- name: Remove unused containers # noqa: no-changed-when
  ansible.builtin.shell:
    cmd: |
      i={{ agama_containers_per_vm + 1 }}
      while true; do
        name="agama-$i"

        err=$(docker rm -f "$name" 2>&1 >/dev/null)

        # break if there is no container with such a name (produces stderr, but 0 exit code)
        if [ -n "$err" ]; then
          break
        fi

        echo "~> Destroyed container $name"
        i=$((i+1))
      done
  register: destroycontainers
  changed_when: '"~> Destroyed container" in destroycontainers.stdout'

- name: Print container destruction output
  ansible.builtin.debug:
    msg: '{{ destroycontainers.stdout }}'
  when: destroycontainers.stdout

- name: Add CNAME record
  ansible.builtin.include_role:
    name: dns_record
  vars:
    dns_record_record: '{{ service_cname_records.web_app }}-{{ inventory_hostname[-1] }}'
